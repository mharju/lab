["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/pprint$macros.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$jquery","~$module$node_modules$jquery$dist$jquery"],"~:use-macros",null,"~:excludes",["~#set",["~$macroexpand","~$deftype"]],"~:name","~$cljs.pprint$macros","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$clojure.walk","^G","~$walk","^G","~$cljs.analyzer","^I","~$ana","^I","~$cljs.core","^K","~$goog","^L"],"~:seen",["^?",["~:require"]],"~:uses",null,"~:defs",["^ ","^@",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",83,"^5",10,"^6",83,"^7",21,"~:arglists",["~#list",["~$quote",["^S",[["~$env","~$form"]]]]]],"^B","~$cljs.pprint$macros/macroexpand","^3","cljs/pprint$macros.cljc","^7",21,"~:method-params",["^S",[["^U","^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^5",4,"~:variadic?",false,"^4",83,"~:ret-tag","~$any","^6",83,"~:max-fixed-arity",2,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]]],"~$parse-lb-options",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",51,"^5",8,"^6",51,"^7",24,"~:private",true,"^R",["^S",["^T",["^S",[["~$opts","~$body"]]]]]],"^15",true,"^B","~$cljs.pprint$macros/parse-lb-options","^3","cljs/pprint$macros.cljc","^7",24,"^X",["^S",[["^16","^17"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",51,"^10","~$cljs.core/IVector","^6",51,"^12",2,"^13",true,"^R",["^S",["^T",["^S",[["^16","^17"]]]]]],"^A",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",40,"^5",11,"^6",40,"^7",18,"~:macro",true,"^R",["^S",["^T",["^S",[["~$type-name","~$&","~$fields"]]]]],"~:top-fn",["^ ","^[",true,"~:fixed-arity",1,"^12",1,"^X",["^S",[["^S",["^1;","^1<"]]]],"^R",["^S",[["^1;","~$&","^1<"]]],"^Z",["^S",[null]]]],"^B","~$cljs.pprint$macros/deftype","^3","cljs/pprint$macros.cljc","^7",18,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["^1;","^1<"]]]],"^R",["^S",[["^1;","~$&","^1<"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^1;","^1<"]]]],"^Y",null,"^1>",1,"^Z",["^S",[null]],"^5",1,"^[",true,"~:methods",[["^ ","^1>",1,"^[",true,"~:tag",["^?",["~$seq","~$cljs.core/IList"]]]],"^4",40,"^1:",true,"^10","^11","^6",40,"^12",1,"^13",false,"^R",["^S",[["^1;","~$&","^1<"]]]],"~$print-length-loop",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",28,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["~$bindings","^17"]]]],"^R",["^S",[["^1E","~$&","^17"]]],"^Z",["^S",[null]]],"^5",11,"^4",102,"^1:",true,"^6",102,"^R",["^S",["^T",["^S",[["^1E","~$&","^17"]]]]],"~:doc","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"^B","~$cljs.pprint$macros/print-length-loop","^3","cljs/pprint$macros.cljc","^7",28,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["^1E","^17"]]]],"^R",["^S",[["^1E","~$&","^17"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^1E","^17"]]]],"^Y",null,"^1>",1,"^Z",["^S",[null]],"^5",1,"^[",true,"^1@",[["^ ","^1>",1,"^[",true,"^1A",["^?",["^1B","^1C"]]]],"^4",102,"^1:",true,"^10","^11","^6",102,"^12",1,"^13",false,"^R",["^S",[["^1E","~$&","^17"]]],"^1F","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"~$defdirectives",["^ ","^Q",null,"^2",["^ ","^15",true,"^3","cljs/pprint$macros.cljc","^7",16,"^1=",["^ ","^[",true,"^1>",0,"^12",0,"^X",["^S",[["^S",["~$directives"]]]],"^R",["^S",[["~$&","^1I"]]],"^Z",["^S",[null]]],"^5",3,"^4",122,"^1:",true,"^6",122,"^R",["^S",["^T",["^S",[["~$&","^1I"]]]]]],"^15",true,"^B","~$cljs.pprint$macros/defdirectives","^3","cljs/pprint$macros.cljc","^7",16,"^1=",["^ ","^[",true,"^1>",0,"^12",0,"^X",["^S",[["^S",["^1I"]]]],"^R",["^S",[["~$&","^1I"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^1I"]]]],"^Y",null,"^1>",0,"^Z",["^S",[null]],"^5",1,"^[",true,"^1@",[["^ ","^1>",0,"^[",true,"^1A",["^?",["^1B","^1C"]]]],"^4",121,"^1:",true,"^10","^11","^6",122,"^12",0,"^13",false,"^R",["^S",[["~$&","^1I"]]]],"~$pll-mod-body",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",90,"^5",8,"^6",90,"^7",20,"^15",true,"^R",["^S",["^T",["^S",[["^U","~$var-sym","^17"]]]]]],"^15",true,"^B","~$cljs.pprint$macros/pll-mod-body","^3","cljs/pprint$macros.cljc","^7",20,"^X",["^S",[["^U","^1L","^17"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",90,"^6",90,"^12",3,"^13",true,"^R",["^S",["^T",["^S",[["^U","^1L","^17"]]]]]],"~$getf",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",28,"^5",11,"^6",28,"^7",15,"^1:",true,"^R",["^S",["^T",["^S",[["~$sym"]]]]],"^1F","Get the value of the field a named by the argument (which should be a keyword)."],"^B","~$cljs.pprint$macros/getf","^3","cljs/pprint$macros.cljc","^7",15,"^X",["^S",[["~$&form","~$&env","^1O"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",28,"^1:",true,"^10",["^?",["^1B","^1C"]],"^6",28,"^12",3,"^13",false,"^R",["^S",["^T",["^S",[["^1O"]]]]],"^1F","Get the value of the field a named by the argument (which should be a keyword)."],"~$pprint-logical-block",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1=",["^ ","^[",true,"^1>",0,"^12",0,"^X",["^S",[["^S",["~$args"]]]],"^R",["^S",[["~$&","^1T"]]],"^Z",["^S",[null]]],"^5",11,"^4",58,"^1:",true,"^6",58,"^R",["^S",["^T",["^S",[["~$&","^1T"]]]]],"^1F","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"^B","~$cljs.pprint$macros/pprint-logical-block","^3","cljs/pprint$macros.cljc","^7",31,"^1=",["^ ","^[",true,"^1>",0,"^12",0,"^X",["^S",[["^S",["^1T"]]]],"^R",["^S",[["~$&","^1T"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^1T"]]]],"^Y",null,"^1>",0,"^Z",["^S",[null]],"^5",1,"^[",true,"^1@",[["^ ","^1>",0,"^[",true,"^1A",["^?",["^1B","^1C"]]]],"^4",58,"^1:",true,"^10","^11","^6",58,"^12",0,"^13",false,"^R",["^S",[["~$&","^1T"]]],"^1F","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"~$pp",["^ ","^Q",null,"^2",["^ ","~:added","1.2","^3","cljs/pprint$macros.cljc","^7",13,"^5",11,"^4",163,"^1:",true,"^6",163,"^R",["^S",["^T",["^S",[[]]]]],"^1F","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"^1W","1.2","^B","~$cljs.pprint$macros/pp","^3","cljs/pprint$macros.cljc","^7",13,"^X",["^S",[["^1Q","^1R"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",163,"^1:",true,"^10",["^?",["^1B","^1C"]],"^6",163,"^12",2,"^13",false,"^R",["^S",["^T",["^S",[[]]]]],"^1F","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"~$process-directive-table-element",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",113,"^5",8,"^6",113,"^7",39,"^15",true,"^R",["^S",["^T",["^S",[[["~$char","~$params","~$flags","~$bracket-info","~$&","~$generator-fn"]]]]]]],"^15",true,"^B","~$cljs.pprint$macros/process-directive-table-element","^3","cljs/pprint$macros.cljc","^7",39,"^X",["^S",[["~$p__28356"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",113,"^10","^19","^6",113,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[[["^1Z","^1[","^20","^21","~$&","^22"]]]]]]],"~$formatter-out",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",143,"^5",11,"^6",143,"^7",24,"^1:",true,"^R",["^S",["^T",["^S",[["~$format-in"]]]]],"^1F","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter-out","^3","cljs/pprint$macros.cljc","^7",24,"^X",["^S",[["^1Q","^1R","^26"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",143,"^1:",true,"^10",["^?",["^1B","^1C"]],"^6",143,"^12",3,"^13",false,"^R",["^S",["^T",["^S",[["^26"]]]]],"^1F","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"~$formatter",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",127,"^5",11,"^6",127,"^7",20,"^1:",true,"^R",["^S",["^T",["^S",[["^26"]]]]],"^1F","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter","^3","cljs/pprint$macros.cljc","^7",20,"^X",["^S",[["^1Q","^1R","^26"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",127,"^1:",true,"^10",["^?",["^1B","^1C"]],"^6",127,"^12",3,"^13",false,"^R",["^S",["^T",["^S",[["^26"]]]]],"^1F","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"~$with-pretty-writer",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",18,"^5",11,"^6",18,"^7",29,"^1:",true,"^R",["^S",["^T",["^S",[["~$base-writer","~$&","^17"]]]]],"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["^2;","^17"]]]],"^R",["^S",[["^2;","~$&","^17"]]],"^Z",["^S",[null]]]],"^B","~$cljs.pprint$macros/with-pretty-writer","^3","cljs/pprint$macros.cljc","^7",29,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["^2;","^17"]]]],"^R",["^S",[["^2;","~$&","^17"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^2;","^17"]]]],"^Y",null,"^1>",1,"^Z",["^S",[null]],"^5",1,"^[",true,"^1@",[["^ ","^1>",1,"^[",true,"^1A",["^?",["^1B","^1C"]]]],"^4",18,"^1:",true,"^10","^11","^6",18,"^12",1,"^13",false,"^R",["^S",[["^2;","~$&","^17"]]]],"~$setf",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",35,"^5",11,"^6",35,"^7",15,"^1:",true,"^R",["^S",["^T",["^S",[["^1O","~$new-val"]]]]],"^1F","Set the value of the field SYM to NEW-VAL"],"^B","~$cljs.pprint$macros/setf","^3","cljs/pprint$macros.cljc","^7",15,"^X",["^S",[["^1Q","^1R","^1O","^2>"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",35,"^1:",true,"^10",["^?",["^1B","^1C"]],"^6",35,"^12",4,"^13",false,"^R",["^S",["^T",["^S",[["^1O","^2>"]]]]],"^1F","Set the value of the field SYM to NEW-VAL"],"~$with-pprint-dispatch",["^ ","^Q",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["~$function","^17"]]]],"^R",["^S",[["^2A","~$&","^17"]]],"^Z",["^S",[null]]],"^5",11,"^4",157,"^1:",true,"^6",157,"^R",["^S",["^T",["^S",[["^2A","~$&","^17"]]]]],"^1F","Execute body with the pretty print dispatch function bound to function."],"^B","~$cljs.pprint$macros/with-pprint-dispatch","^3","cljs/pprint$macros.cljc","^7",31,"^1=",["^ ","^[",true,"^1>",1,"^12",1,"^X",["^S",[["^S",["^2A","^17"]]]],"^R",["^S",[["^2A","~$&","^17"]]],"^Z",["^S",[null]]],"^X",["^S",[["^S",["^2A","^17"]]]],"^Y",null,"^1>",1,"^Z",["^S",[null]],"^5",1,"^[",true,"^1@",[["^ ","^1>",1,"^[",true,"^1A",["^?",["^1B","^1C"]]]],"^4",157,"^1:",true,"^10","^11","^6",157,"^12",1,"^13",false,"^R",["^S",[["^2A","~$&","^17"]]],"^1F","Execute body with the pretty print dispatch function bound to function."]],"~:require-macros",["^ ","^K","^K"],"~:cljs.analyzer/constants",["^ ","^M",["^?",["~$args__28392__auto__","~$my-e-f__28388__auto__","~$&","~:suffix","~$cljs.core/<","~$-write","~$cljs.core/binding","~$cljs.pprint/*print-pprint-dispatch*","~$cljs.core/=","~$type-tag","~$cljs.core/array-map","~$cljs.pprint/pretty-writer?","~$cljs.core/deref","~$cljs.core/hash-map","~$loop*","~:generator-fn","~$cljs.pprint/*current-level*","~$cljs.core/string?","~$cljs.core/*1","~$cljs.pprint/*print-miser-width*","~$cljs.pprint/execute-format","~$cljs.core/defn-","~:params","~$fn","~$cljs.core/*out*","~$format-in__28397__auto__","~$cljs.pprint/make-pretty-writer","~$do","~$this","~$offset","~$if","~:prefix","~$cljs.pprint/-ppflush","~$cljs.core/swap!","~$cljs.core/let","~$cljs.pprint/*print-right-margin*","~$cljs.core/*print-length*","^1[","~$cljs.core/defrecord","~$navigator__28393__auto__","~$x__28273__auto__","~$directive-table","~$cljs.core/loop","~$cljs.pprint/init-navigator","~$recur","~$base-writer__28259__auto__","~$cf__28398__auto__","~:per-line-prefix","~$cljs.core/fn","~$args__28399__auto__","~$cljs.pprint/start-block","~$cljs.pprint/end-block","~$new-writer__28260__auto__","~$cljs.core/not","~$my-c-c__28387__auto__","~$cljs.core/assoc","~$cljs.pprint/level-exceeded","~:bracket-info","~$stream__28391__auto__","~$cljs.pprint/pprint","~:flags","~:directive","~$cf__28390__auto__","~$my-i-n__28389__auto__","~:type-tag","~$cljs.pprint/cached-compile","~$cljs.core/or","~$navigator__28400__auto__","~$cljs.core/inc","~$def","~$format-in__28386__auto__","~$cljs.pprint/*current-length*"]],"~:order",["^3:","^3D","^3K","^3L","^2O","^2J","^30","^36","^32","^3;","^2W","^38","^2P","^34","^39","^3N","^33","^3=","^2M","^2Y","^3?","^2L","^3W","^2G","^37","^3F","^3O","^2I","^2T","^3[","^42","^3I","^3J","^2R","^3C","^3A","^3Y","^3<","^2H","^3T","^2Z","^3S","^3P","^2S","^2N","^2[","^1[","^35","^40","^3@","^2Q","^41","^3M","^3X","^2F","^2X","^3V","^3B","^3U","^2U","^3G","^3Q","~$&","^2E","^3>","^31","^3E","^3H","^3Z","^2K","^3R","^2V"]],"^3S",["^ ","^N",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^L","^K","^G","^I"]]