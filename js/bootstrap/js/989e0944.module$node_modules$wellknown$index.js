shadow$provide[7]=function(mc,Nb,Tb,Hb){function m(u){function B(N){return(N=H.substring(ja).match(N))?(ja+=N[0].length,N[0]):null}function ha(){B(/^\s*/)}function na(){ha();for(var N=0,O=[],Y=[O],E=O,X;X=B(/^(\()/)||B(/^(\))/)||B(/^(,)/)||B(Fa);){if("("===X)Y.push(E),E=[],Y[Y.length-1].push(E),N++;else if(")"===X){if(0===E.length)return null;E=Y.pop();if(!E)return null;N--;if(0===N)break}else if(","===X)E=[],Y[Y.length-1].push(E);else{if(X.split(/\s/g).some(isNaN))return null;Array.prototype.push.apply(E,
X.split(/\s/g).map(parseFloat))}ha()}return 0!==N?null:O}function Ca(){for(var N=[],O,Y;Y=B(Fa)||B(/^(,)/);)","===Y?(N.push(O),O=[]):Y.split(/\s/g).some(isNaN)||(O||(O=[]),Array.prototype.push.apply(O,Y.split(/\s/g).map(parseFloat))),ha();if(O)N.push(O);else return null;return N.length?N:null}function La(){if(!B(/^(point)/i))return null;ha();if(!B(/^(\()/))return null;var N=Ca();if(!N)return null;ha();return B(/^(\))/)?{type:"Point",coordinates:N[0]}:null}function ea(){if(!B(/^(multipoint)/i))return null;
ha();H="MULTIPOINT ("+H.substring(H.indexOf("(")+1,H.length-1).replace(/\(/g,"").replace(/\)/g,"")+")";var N=na();if(!N)return null;ha();return{type:"MultiPoint",coordinates:N}}function Q(){if(!B(/^(multilinestring)/i))return null;ha();var N=na();if(!N)return null;ha();return{type:"MultiLineString",coordinates:N}}function ba(){if(!B(/^(linestring)/i))return null;ha();if(!B(/^(\()/))return null;var N=Ca();return N&&B(/^(\))/)?{type:"LineString",coordinates:N}:null}function W(){var N=[],O;if(!B(/^(geometrycollection)/i))return null;
ha();if(!B(/^(\()/))return null;for(;O=aa();)N.push(O),ha(),B(/^(,)/),ha();return B(/^(\))/)?{type:"GeometryCollection",geometries:N}:null}function aa(){var N;(N=La()||ba())||(B(/^(polygon)/i)?(ha(),N=(N=na())?{type:"Polygon",coordinates:N}:null):N=null);(N=N||ea()||Q())||(B(/^(multipolygon)/i)?(ha(),N=(N=na())?{type:"MultiPolygon",coordinates:N}:null):N=null);return N||W()}u=u.split(";");var H=u.pop(),R=(u.shift()||"").split("\x3d").pop(),ja=0;return function(N){N&&R.match(/\d+/)&&(N.crs={type:"name",
properties:{name:"urn:ogc:def:crs:EPSG::"+R}});return N}(aa())}function ka(u){function B(La){return La.join(" ")}function ha(La){return La.map(B).join(", ")}function na(La){return La.map(ha).map(Ca).join(", ")}function Ca(La){return"("+La+")"}"Feature"===u.type&&(u=u.geometry);switch(u.type){case "Point":return"POINT ("+B(u.coordinates)+")";case "LineString":return"LINESTRING ("+ha(u.coordinates)+")";case "Polygon":return"POLYGON ("+na(u.coordinates)+")";case "MultiPoint":return"MULTIPOINT ("+ha(u.coordinates)+
")";case "MultiPolygon":return"MULTIPOLYGON ("+u.coordinates.map(na).map(Ca).join(", ")+")";case "MultiLineString":return"MULTILINESTRING ("+na(u.coordinates)+")";case "GeometryCollection":return"GEOMETRYCOLLECTION ("+u.geometries.map(ka).join(", ")+")";default:throw Error("stringify requires a valid GeoJSON Feature or geometry object as input");}}Tb.exports=m;Tb.exports.parse=m;Tb.exports.stringify=ka;mc=/[-+]?([0-9]*\.[0-9]+|[0-9]+)([eE][-+]?[0-9]+)?/;var Fa=new RegExp("^"+mc.source+"(\\s"+mc.source+
"){1,}")}
goog.provide("module$node_modules$wellknown$index");
goog.global. module$node_modules$wellknown$index=shadow.js.require(7, {});
